version: 2.1

# Define reusable commands
commands:
  install_dependencies:
    description: "Install Node.js dependencies"
    steps:
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "negoziooo/package-lock.json" }}
            - v1-dependencies-
      - run:
          name: Install dependencies
          command: |
            cd negoziooo
            npm ci
      - save_cache:
          paths:
            - negoziooo/node_modules
          key: v1-dependencies-{{ checksum "negoziooo/package-lock.json" }}

  setup_environment:
    description: "Setup environment variables"
    steps:
      - run:
          name: Setup environment
          command: |
            cd negoziooo
            echo "NEXT_PUBLIC_SUPABASE_URL=https://htdgoceqepvrffblfvns.supabase.co" >> .env.local
            echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imh0ZGdvY2VxZXB2cmZmYmxmdm5zIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMwNTUwNzksImV4cCI6MjA2ODYzMTA3OX0.TJqTe3f0-GjFLoFrT64LKbUJWtXU9ht08tX9O8Yp7y8" >> .env.local
            echo "NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=$STRIPE_PUBLISHABLE_KEY" >> .env.local
            echo "STRIPE_SECRET_KEY=$STRIPE_SECRET_KEY" >> .env.local

# Define jobs
jobs:
  # Build and test the application
  build_and_test:
    docker:
      - image: cimg/node:18.17
    working_directory: ~/project
    steps:
      - checkout
      - install_dependencies
      - setup_environment
      
      # Run linting
      - run:
          name: Run ESLint
          command: |
            cd negoziooo
            npm run lint || echo "Linting completed with warnings"
      
      # Run type checking
      - run:
          name: Run TypeScript check
          command: |
            cd negoziooo
            npx tsc --noEmit || echo "Type checking completed"
      
      # Build the application
      - run:
          name: Build application
          command: |
            cd negoziooo
            npm run build
      
      # Save build artifacts
      - persist_to_workspace:
          root: .
          paths:
            - negoziooo/.next
            - negoziooo/out

  # Run tests
  test:
    docker:
      - image: cimg/node:18.17
    working_directory: ~/project
    steps:
      - checkout
      - install_dependencies
      - setup_environment
      
      # Run unit tests (if they exist)
      - run:
          name: Run tests
          command: |
            cd negoziooo
            if [ -f "package.json" ] && grep -q '"test"' package.json; then
              npm test || echo "No tests found or tests failed"
            else
              echo "No test script found in package.json"
            fi

  # Security audit
  security_audit:
    docker:
      - image: cimg/node:18.17
    working_directory: ~/project
    steps:
      - checkout
      - install_dependencies
      
      # Run npm audit
      - run:
          name: Security audit
          command: |
            cd negoziooo
            npm audit --audit-level=high || echo "Security audit completed with warnings"

  # Deploy to staging (development branch)
  deploy_staging:
    docker:
      - image: cimg/node:18.17
    working_directory: ~/project
    steps:
      - checkout
      - attach_workspace:
          at: .
      - install_dependencies
      
      # Deploy to Vercel staging
      - run:
          name: Deploy to staging
          command: |
            cd negoziooo
            echo "Deploying to staging environment..."
            # Add your staging deployment commands here
            # Example: npx vercel --token $VERCEL_TOKEN --env staging

  # Deploy to production (main branch)
  deploy_production:
    docker:
      - image: cimg/node:18.17
    working_directory: ~/project
    steps:
      - checkout
      - attach_workspace:
          at: .
      - install_dependencies
      
      # Deploy to production
      - run:
          name: Deploy to production
          command: |
            cd negoziooo
            echo "Deploying to production environment..."
            # Add your production deployment commands here
            # Example: npx vercel --prod --token $VERCEL_TOKEN

# Define workflows
workflows:
  version: 2
  
  # Main workflow for all branches
  build_test_deploy:
    jobs:
      # Always run build and test
      - build_and_test:
          filters:
            branches:
              only: /.*/
      
      - test:
          requires:
            - build_and_test
          filters:
            branches:
              only: /.*/
      
      - security_audit:
          filters:
            branches:
              only: /.*/
      
      # Deploy to staging on development branch
      - deploy_staging:
          requires:
            - build_and_test
            - test
          filters:
            branches:
              only: development
      
      # Deploy to production on main branch
      - deploy_production:
          requires:
            - build_and_test
            - test
            - security_audit
          filters:
            branches:
              only: main

  # Nightly security check
  nightly_security:
    triggers:
      - schedule:
          cron: "0 2 * * *"  # Run at 2 AM every day
          filters:
            branches:
              only: main
    jobs:
      - security_audit
